// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  password       String?   // Made optional for OAuth users
  role           Role      @default(CUSTOMER)
  phone          String?
  address        String?
  city           String?
  state          String?
  postalCode     String?
  country        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orders         Order[]
  addresses      Address[]
  cart           Cart?
  
  // NextAuth.js fields
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
}

// NextAuth.js models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  price           Float
  discountedPrice Float?
  images          String[]
  weight          String?
  ingredients     String?
  benefits        String[]
  howToUse        String?
  stock           Int          @default(0)
  status          ProductStatus @default(ACTIVE)
  categoryId      String       @db.ObjectId
  category        Category     @relation(fields: [categoryId], references: [id])
  collections     Collection[] @relation(fields: [collectionIds], references: [id])
  collectionIds   String[]     @db.ObjectId
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  image     String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Collection {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  products    Product[] @relation(fields: [productIds], references: [id])
  productIds  String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String      @unique
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       String      @db.ObjectId
  subtotal        Float
  shipping        Float
  discount        Float       @default(0)
  total           Float
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  name      String
  price     Float
  quantity  Int
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Address {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId     String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  phone      String
  address    String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  orders     Order[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String
  rating    Int
  comment   String
  date      DateTime @default(now())
}

model Discount {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  code        String       @unique
  description String?
  type        DiscountType
  value       Float
  minAmount   Float?
  maxAmount   Float?
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

// Shipping settings models
model ShippingRule {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  minOrderValue Float
  maxOrderValue Float?  // null means no upper limit
  shippingCost  Float
  settingsId    String  @db.ObjectId
  settings      ShippingSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
}

model ShippingZone {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  countries     String[]
  shippingCost  Float
  settingsId    String  @db.ObjectId
  settings      ShippingSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
}

model ShippingSettings {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  freeShippingThreshold Float?
  internationalShipping Boolean        @default(false)
  rules                 ShippingRule[]
  zones                 ShippingZone[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}
